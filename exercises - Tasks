/* THIS IS A SIMPLE TASK MANAGEMENT SYSTEM USING MYSQL.

THE OBJECTIVE OF THIS PROJECT IS DEMONSTRATE MY ABILITIES
TO DESIGN A DATABASE, WRITE SQL QUERIES, AND INTERACT WITH A RELATIONAL DATABASE. */

-- PROJECT: TASK MANAGEMENT SYSTEM

-- THIS SYSTEM ALLOWS USERS TO MANAGE TASKS, ASSIGN THEM TO USERS, AND TRACK THEIR STATUS.
-- IT WILL INCLUDE:

-- 1) A DATABASE TO STORE USERS, TASKS, AND TASK STATUSES.
-- 2) BASIC CRUD OPERATIONS.
-- 3) EXAMPLE QUERIES TO RETRIEVE USEFUL INFORMATION.

/* THE DESIGN OF DATABASE */

-- TABLES:

-- USERS
--     USER_ID (PRIMARY KEY, AUTO INCREMENT)
--     USERNAME (UNIQUE)
--     EMAIL (UNIQUE)
--     CREATED_AT (TIMESTAMP)

-- TASKS
--     TASK_ID (PRIMARY KEY, AUTO INCREMENT)
--     TITLE (TASK TITLE)
--     DESCRIPTION (TASK DESCRIPTION)
--     STATUS_ID (FOREIGN KEY TO STATUSES TABLE)
--     ASSIGNED_TO (FOREIGN KEY TO USERS TABLE)
--     CREATED_AT (TIMESTAMP)
--     DUE_DATE (DATE)

-- STATUSES
--     STATUS_ID (PRIMARY KEY, AUTO INCREMENT)
--     STATUS_NAME (E.G., "TO DO", "IN PROGESS", "COMPLETED")

/* SCRIPT */

--CREATING A DATABASE AND TABLES 

CREATE DATABASE TASK_MANAGEMENT;
USE TASK_MANAGEMENT;

CREATE TABLE USERS (
	USER_ID INT AUTO_INCREMENT PRIMARY KEY,
	USERNAME VARCHAR(50) NOT NULL UNIQUE,
	EMAIL VARCHAR(100) NOT NULL UNIQUE,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE STATUSES (
	STATUS_ID INT AUTO_INCREMENT PRIMARY KEY,
	STATUS_NAME VARCHAR(50) NOT NULL UNIQUE
	);

CREATE TABLE TASKS (
	TASK_ID INT AUTO_INCREMENT PRIMARY KEY,
	TITLE VARCHAR(100) NOT NULL,
	DESCRIPTION TEXT,
	STATUS_ID INT,
	ASSIGNED_TO INT,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	DUE_DATE DATE,
	FOREIGN KEY (STATUS_ID) REFERENCES STATUSES(STATUS_ID),
	FOREIGN KEY (ASSIGNED_TO) REFERENCES USERS (USER_ID)
);

-- INSERT SAMPLE DATA

-- INSERT USERS
INSERT INTO USERS (USERNAME, EMAIL) VALUES
('Yuri', 'yuri.exemplo@anything.com'),
('Nico', 'nico.exemplo@anything.com');

-- INSERT STATUSES
INSERT INTO STATUSES (STATUS_NAME) VALUES
('To do'),
('In progress'),
('Completed');

-- INSERT TASKS
INSERT INTO TASKS (TITLE, DESCRIPTION, STATUS_ID, ASSIGNED_TO, DUE_DATE) VALUES
('Take a shower', 'Wash myself with soap and get clean', 1, 1, '2025-03-13'),
('Apply for a job', 'Send an email with my CV', 2, 2, '2025-03-15')
('Test application', 'Test application for bugs and issues', 3, 1, '2025-04-01');

-- SQL QUERIES

-- GET ALL TASKS ASSIGNED TO A SPECIFIC USER:
SELECT T.TASK_ID, T.TITLE, T.DESCRIPTION, S.STATUS_NAME, T.DUE_NAME
FROM TASKS T
JOIN STATUSES S ON T.STATUS_ID = S.STATUS_ID
WHERE T.ASSIGNED_TO = 1;

-- GET ALL TASKS WITH A SPECIFIC STATUS:
SELECT T.TASK_ID, T.TITLE, T.DESCRIPTION, U.USERNAME, T.DUE_DATE
FROM TASKS T
JOIN USERS U ON T.ASSIGNED_TO = U.USER_ID
WHERE T.STATUS_ID = 2;

-- UPDATE A TASK'S STATUS:
UPDATE TASKS
SET STATUS_ID = 3
WHERE STATUS_ID = 1;

-- DELETE A TASK:
DELETE FROM TASKS
WHERE TASK_ID = 3;

-- GET ALL USERS AND THEIR TASKS:
SELECT U.USERNAME, T.TITLE, T.DESCRIPTION, S.STATUS_NAME, T.DUE_DATE
FROM USARS U
LEFT JOIN TASKS T ON U.USER_ID = T.ASSIGNED_TO
LEFT JOIN STATUSES S ON T.STATUS_ID = S.STATUS_ID;

-------------------------------------
This exercise is not completed yet.
I will put some screenshots from the database, tables and queries returned.
-------------------------------------
*References*

DAMAS, Luís. SQL - Structured Query Language. 6. ed. Rio de Janeiro: LTC, 2007. E-book. p.ix. ISBN 9788521632450. 
Disponível em: https://app.minhabiblioteca.com.br/reader/books/9788521632450/. Acesso em: 13 mar. 2025

CARVALHO, Vinícius. MySQL: comece com o principal banco de dados open source do mercado. São Paulo, SP: Casa do Código, 2015. E-book. 
Disponível em: https://plataforma.bvirtual.com.br. Acesso em: 13 mar. 2025.
